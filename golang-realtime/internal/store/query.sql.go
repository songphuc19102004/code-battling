// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addRoomPlayerScore = `-- name: AddRoomPlayerScore :one
UPDATE room_players
SET score = score + $3
WHERE room_id = $1 AND player_id = $2
RETURNING room_id, player_id, score, place
`

type AddRoomPlayerScoreParams struct {
	RoomID      int32
	PlayerID    int32
	ScoreTooAdd pgtype.Int4
}

func (q *Queries) AddRoomPlayerScore(ctx context.Context, arg AddRoomPlayerScoreParams) (RoomPlayer, error) {
	row := q.db.QueryRow(ctx, addRoomPlayerScore, arg.RoomID, arg.PlayerID, arg.ScoreTooAdd)
	var i RoomPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.Score,
		&i.Place,
	)
	return i, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (id, name, password)
VALUES ($1, $2, $3)
RETURNING id, name, password
`

type CreatePlayerParams struct {
	ID       int32
	Name     string
	Password string
}

// -- Players
func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.ID, arg.Name, arg.Password)
	var i Player
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const createProgrammingLanguage = `-- name: CreateProgrammingLanguage :one
INSERT INTO programming_languages (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateProgrammingLanguageParams struct {
	ID   int32
	Name string
}

// Programming Languages
func (q *Queries) CreateProgrammingLanguage(ctx context.Context, arg CreateProgrammingLanguageParams) (ProgrammingLanguage, error) {
	row := q.db.QueryRow(ctx, createProgrammingLanguage, arg.ID, arg.Name)
	var i ProgrammingLanguage
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (id, language_id, template_function, title, description, score, difficulty)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, language_id, template_function, title, description, score, difficulty
`

type CreateQuestionParams struct {
	ID               int32
	LanguageID       int32
	TemplateFunction pgtype.Text
	Title            string
	Description      pgtype.Text
	Score            int32
	Difficulty       int32
}

// Questions
func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.ID,
		arg.LanguageID,
		arg.TemplateFunction,
		arg.Title,
		arg.Description,
		arg.Score,
		arg.Difficulty,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.TemplateFunction,
		&i.Title,
		&i.Description,
		&i.Score,
		&i.Difficulty,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, name, description)
VALUES ($1, $2, $3)
RETURNING id, name, description
`

type CreateRoomParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
}

// Rooms
func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.ID, arg.Name, arg.Description)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createRoomPlayer = `-- name: CreateRoomPlayer :one
INSERT INTO room_players (room_id, player_id, score, place)
VALUES ($1, $2, $3, $4)
RETURNING room_id, player_id, score, place
`

type CreateRoomPlayerParams struct {
	RoomID   int32
	PlayerID int32
	Score    pgtype.Int4
	Place    pgtype.Int4
}

// Room Players
func (q *Queries) CreateRoomPlayer(ctx context.Context, arg CreateRoomPlayerParams) (RoomPlayer, error) {
	row := q.db.QueryRow(ctx, createRoomPlayer,
		arg.RoomID,
		arg.PlayerID,
		arg.Score,
		arg.Place,
	)
	var i RoomPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.Score,
		&i.Place,
	)
	return i, err
}

const createTestCase = `-- name: CreateTestCase :one
INSERT INTO test_cases (question_id, question_language_id, input, expected_output, time_constraint, space_constraint)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, question_id, question_language_id, input, expected_output, time_constraint, space_constraint
`

type CreateTestCaseParams struct {
	QuestionID         int32
	QuestionLanguageID int32
	Input              string
	ExpectedOutput     string
	TimeConstraint     pgtype.Float8
	SpaceConstraint    pgtype.Int4
}

// Test Cases
func (q *Queries) CreateTestCase(ctx context.Context, arg CreateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRow(ctx, createTestCase,
		arg.QuestionID,
		arg.QuestionLanguageID,
		arg.Input,
		arg.ExpectedOutput,
		arg.TimeConstraint,
		arg.SpaceConstraint,
	)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.QuestionLanguageID,
		&i.Input,
		&i.ExpectedOutput,
		&i.TimeConstraint,
		&i.SpaceConstraint,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players
WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlayer, id)
	return err
}

const deleteProgrammingLanguage = `-- name: DeleteProgrammingLanguage :exec
DELETE FROM programming_languages
WHERE id = $1
`

func (q *Queries) DeleteProgrammingLanguage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProgrammingLanguage, id)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE id = $1 AND language_id = $2
`

type DeleteQuestionParams struct {
	ID         int32
	LanguageID int32
}

func (q *Queries) DeleteQuestion(ctx context.Context, arg DeleteQuestionParams) error {
	_, err := q.db.Exec(ctx, deleteQuestion, arg.ID, arg.LanguageID)
	return err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const deleteRoomPlayer = `-- name: DeleteRoomPlayer :exec
DELETE FROM room_players
WHERE room_id = $1 AND player_id = $2
`

type DeleteRoomPlayerParams struct {
	RoomID   int32
	PlayerID int32
}

func (q *Queries) DeleteRoomPlayer(ctx context.Context, arg DeleteRoomPlayerParams) error {
	_, err := q.db.Exec(ctx, deleteRoomPlayer, arg.RoomID, arg.PlayerID)
	return err
}

const deleteTestCase = `-- name: DeleteTestCase :exec
DELETE FROM test_cases
WHERE id = $1
`

func (q *Queries) DeleteTestCase(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTestCase, id)
	return err
}

const getLeaderboardForRoom = `-- name: GetLeaderboardForRoom :many
SELECT p.name, rp.score, rp.place
FROM room_players rp
JOIN players p ON rp.player_id = p.id
WHERE rp.room_id = $1
ORDER BY rp.place
`

type GetLeaderboardForRoomRow struct {
	Name  string
	Score pgtype.Int4
	Place pgtype.Int4
}

func (q *Queries) GetLeaderboardForRoom(ctx context.Context, roomID int32) ([]GetLeaderboardForRoomRow, error) {
	rows, err := q.db.Query(ctx, getLeaderboardForRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardForRoomRow
	for rows.Next() {
		var i GetLeaderboardForRoomRow
		if err := rows.Scan(&i.Name, &i.Score, &i.Place); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name, password FROM players
WHERE id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, id int32) (Player, error) {
	q.playerMu.Lock()
	defer q.playerMu.Unlock()

	row := q.db.QueryRow(ctx, getPlayer, id)
	var i Player
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const getPlayerByName = `-- name: GetPlayerByName :one
SELECT id, name, password FROM players
WHERE name = $1
`

func (q *Queries) GetPlayerByName(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByName, name)
	var i Player
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const getProgrammingLanguage = `-- name: GetProgrammingLanguage :one
SELECT id, name FROM programming_languages
WHERE id = $1
`

func (q *Queries) GetProgrammingLanguage(ctx context.Context, id int32) (ProgrammingLanguage, error) {
	row := q.db.QueryRow(ctx, getProgrammingLanguage, id)
	var i ProgrammingLanguage
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, language_id, template_function, title, description, score, difficulty FROM questions
WHERE id = $1 AND language_id = $2
`

type GetQuestionParams struct {
	ID         int32
	LanguageID int32
}

func (q *Queries) GetQuestion(ctx context.Context, arg GetQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, arg.ID, arg.LanguageID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.TemplateFunction,
		&i.Title,
		&i.Description,
		&i.Score,
		&i.Difficulty,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT id, name, description FROM rooms
WHERE id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id int32) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getRoomPlayer = `-- name: GetRoomPlayer :one
SELECT room_id, player_id, score, place FROM room_players
WHERE room_id = $1 AND player_id = $2
`

type GetRoomPlayerParams struct {
	RoomID   int32
	PlayerID int32
}

func (q *Queries) GetRoomPlayer(ctx context.Context, arg GetRoomPlayerParams) (RoomPlayer, error) {
	row := q.db.QueryRow(ctx, getRoomPlayer, arg.RoomID, arg.PlayerID)
	var i RoomPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.Score,
		&i.Place,
	)
	return i, err
}

const getTestCase = `-- name: GetTestCase :one
SELECT id, question_id, question_language_id, input, expected_output, time_constraint, space_constraint FROM test_cases
WHERE id = $1
`

func (q *Queries) GetTestCase(ctx context.Context, id int32) (TestCase, error) {
	row := q.db.QueryRow(ctx, getTestCase, id)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.QuestionLanguageID,
		&i.Input,
		&i.ExpectedOutput,
		&i.TimeConstraint,
		&i.SpaceConstraint,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, name, password FROM players
ORDER BY id
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayersInRoom = `-- name: ListPlayersInRoom :many
SELECT p.id, p.name, p.password FROM players p
JOIN room_players rp ON p.id = rp.player_id
WHERE rp.room_id = $1
ORDER BY rp.place
`

func (q *Queries) ListPlayersInRoom(ctx context.Context, roomID int32) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayersInRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProgrammingLanguages = `-- name: ListProgrammingLanguages :many
SELECT id, name FROM programming_languages
ORDER BY id
`

func (q *Queries) ListProgrammingLanguages(ctx context.Context) ([]ProgrammingLanguage, error) {
	rows, err := q.db.Query(ctx, listProgrammingLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProgrammingLanguage
	for rows.Next() {
		var i ProgrammingLanguage
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, language_id, template_function, title, description, score, difficulty FROM questions
ORDER BY id, language_id
`

func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.TemplateFunction,
			&i.Title,
			&i.Description,
			&i.Score,
			&i.Difficulty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByLanguage = `-- name: ListQuestionsByLanguage :many
SELECT id, language_id, template_function, title, description, score, difficulty FROM questions
WHERE language_id = $1
ORDER BY id
`

func (q *Queries) ListQuestionsByLanguage(ctx context.Context, languageID int32) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestionsByLanguage, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.TemplateFunction,
			&i.Title,
			&i.Description,
			&i.Score,
			&i.Difficulty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT id, name, description FROM rooms
ORDER BY id
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestCasesForQuestion = `-- name: ListTestCasesForQuestion :many
SELECT id, question_id, question_language_id, input, expected_output, time_constraint, space_constraint FROM test_cases
WHERE question_id = $1 AND question_language_id = $2
ORDER BY id
`

type ListTestCasesForQuestionParams struct {
	QuestionID         int32
	QuestionLanguageID int32
}

func (q *Queries) ListTestCasesForQuestion(ctx context.Context, arg ListTestCasesForQuestionParams) ([]TestCase, error) {
	rows, err := q.db.Query(ctx, listTestCasesForQuestion, arg.QuestionID, arg.QuestionLanguageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestCase
	for rows.Next() {
		var i TestCase
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.QuestionLanguageID,
			&i.Input,
			&i.ExpectedOutput,
			&i.TimeConstraint,
			&i.SpaceConstraint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE players
SET name = $2, password = $3
WHERE id = $1
RETURNING id, name, password
`

type UpdatePlayerParams struct {
	ID       int32
	Name     string
	Password string
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayer, arg.ID, arg.Name, arg.Password)
	var i Player
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const updateProgrammingLanguage = `-- name: UpdateProgrammingLanguage :one
UPDATE programming_languages
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateProgrammingLanguageParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateProgrammingLanguage(ctx context.Context, arg UpdateProgrammingLanguageParams) (ProgrammingLanguage, error) {
	row := q.db.QueryRow(ctx, updateProgrammingLanguage, arg.ID, arg.Name)
	var i ProgrammingLanguage
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET template_function = $3, title = $4, description = $5, score = $6, difficulty = $7
WHERE id = $1 AND language_id = $2
RETURNING id, language_id, template_function, title, description, score, difficulty
`

type UpdateQuestionParams struct {
	ID               int32
	LanguageID       int32
	TemplateFunction pgtype.Text
	Title            string
	Description      pgtype.Text
	Score            int32
	Difficulty       int32
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.ID,
		arg.LanguageID,
		arg.TemplateFunction,
		arg.Title,
		arg.Description,
		arg.Score,
		arg.Difficulty,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.TemplateFunction,
		&i.Title,
		&i.Description,
		&i.Score,
		&i.Difficulty,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdateRoomParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.ID, arg.Name, arg.Description)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateRoomPlayerScore = `-- name: UpdateRoomPlayerScore :one
UPDATE room_players
SET score = $3, place = $4
WHERE room_id = $1 AND player_id = $2
RETURNING room_id, player_id, score, place
`

type UpdateRoomPlayerScoreParams struct {
	RoomID   int32
	PlayerID int32
	Score    pgtype.Int4
	Place    pgtype.Int4
}

func (q *Queries) UpdateRoomPlayerScore(ctx context.Context, arg UpdateRoomPlayerScoreParams) (RoomPlayer, error) {
	row := q.db.QueryRow(ctx, updateRoomPlayerScore,
		arg.RoomID,
		arg.PlayerID,
		arg.Score,
		arg.Place,
	)
	var i RoomPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.Score,
		&i.Place,
	)
	return i, err
}

const updateTestCase = `-- name: UpdateTestCase :one
UPDATE test_cases
SET input = $2, expected_output = $3, time_constraint = $4, space_constraint = $5
WHERE id = $1
RETURNING id, question_id, question_language_id, input, expected_output, time_constraint, space_constraint
`

type UpdateTestCaseParams struct {
	ID              int32
	Input           string
	ExpectedOutput  string
	TimeConstraint  pgtype.Float8
	SpaceConstraint pgtype.Int4
}

func (q *Queries) UpdateTestCase(ctx context.Context, arg UpdateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRow(ctx, updateTestCase,
		arg.ID,
		arg.Input,
		arg.ExpectedOutput,
		arg.TimeConstraint,
		arg.SpaceConstraint,
	)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.QuestionLanguageID,
		&i.Input,
		&i.ExpectedOutput,
		&i.TimeConstraint,
		&i.SpaceConstraint,
	)
	return i, err
}
